#!/usr/bin/env php
<?php

define('DS', DIRECTORY_SEPARATOR);

class LessWatcher
{

    private $srcDir;
    private $destDir;
    private $outputExtension;
    private $compiled;
    private $errors = array();

    public function __construct()
    {
        $args = $_SERVER['argv'];

        if (count($args) < 3)
        {
            $this->writeln("Usage:\n"
                . "  \$ watch-less [LESS_SOURCE_DIRECTORY]"
                    . "[CSS_OUTPUT_DIRECTORY]\n"
                . "  \$ watch-less [LESS_SOURCE_DIRECTORY]"
                    . "[CSS_OUTPUT_DIRECTORY] [OUTPUT_EXTENSION=.css]");
            exit;
        }

        $this->srcDir = rtrim($args[1], DS);
        $this->destDir = rtrim($args[2], DS);
        $this->outputExtension = count($args) > 3 ? $args[3] : '.css';

        $this->writeln();
        $this->writeln('Watching ' . $this->srcDir . '...', 'white', 'blue');
        $this->watch();
    }

    public function watch()
    {
        $this->compiled = array();
        $this->processDirectory($this->srcDir, $this->destDir);

        usleep(500 * 1000);
        $this->watch();
    }

    public function processDirectory($srcDir, $destDir)
    {
        $iterator = new \DirectoryIterator($srcDir);
        foreach ($iterator as $f)
        {
            $filename = $f->getFilename();
            if (in_array($filename, array('.', '..')))
            {
                continue;
            }
            $path = $f->getPathname();
            $destPath = $destDir . DS . $filename;
            if ($f->isDir())
            {
                $this->processDirectory($path, $destPath);
                continue;
            }
            $this->processFile($path, $destPath);
        }
    }

    public function processFile($srcFile, $destFile)
    {
        if (substr($srcFile, -5) !== '.less')
        {
            return;
        }
        $destFile = substr($destFile, 0, -5) . $this->outputExtension;
        if (is_file($destFile))
        {
            $destFile = realpath($destFile);
        }
        $content = file_get_contents($srcFile);
        if (preg_match_all('/@import +[\'"]([^\'"]+)[\'"];/', $content,
            $matches))
        {
            for ($i = 0, $cn = count($matches[0]); $i < $cn; $i++)
            {
                $importFile = realpath(dirname($srcFile) . DS
                    . $matches[1][$i]);
                if (!$importFile)
                {
                    continue;
                }
                $this->processFile($importFile, dirname($destFile)
                    . DS . $matches[1][$i]);
            }
        }

        if (in_array($srcFile, $this->compiled))
        {
            return;
        }

        $destDir = dirname($destFile);

        if (!is_dir($destDir))
        {
            mkdir($destDir, 0, true);
        }

        if (is_file($destFile) && filemtime($destFile) >= filemtime($srcFile))
        {
            return;
        }

        $this->compileFile($srcFile, $destFile);
        $this->compiled[] = $srcFile;
    }

    public function compileFile($srcFile, $destFile)
    {
        exec('lessc --yui-compress ' . $srcFile . ' ' . $destFile . ' 2>&1',
            $output, $return);

        $output = implode("\n", $output);
        if (preg_match('/(.*Error:.*)/', $output, $matches))
        {
            if (isset($this->errors[$srcFile])
                && $this->errors[$srcFile] === $output)
            {
                return;
            }
            $this->writeln('[' . date('H:i:s') . '] '
                . $this->removeColor($matches[1]), 'white', 'red');
            $this->errors[$srcFile] = $output;
            return;
        }

        if (isset($this->errors[$srcFile]))
        {
            unset($this->errors[$srcFile]);
        }

        $this->writeln('[' . date('H:i:s') . '] '
            . substr($srcFile, strlen($this->srcDir) + 1) . ' -> '
            . substr($destFile, strlen($this->destDir) + 1), 'green');
    }

    public function write($str, $fgColor = null, $bgColor = null)
    {
        echo $this->colorize($str, $fgColor, $bgColor);
    }

    public function writeln($str = '', $fgColor = null, $bgColor = null)
    {
        $this->write($str, $fgColor, $bgColor);
        echo "\n";
    }

    public function colorize($str, $fgColor = null, $bgColor = null)
    {
        $colors = array(
            'fg' => array(
                'black' => '0;30',
                'dark_gray' => '1;30',
                'blue' => '0;34',
                'light_blue' => '1;34',
                'green' => '0;32',
                'light_green' => '1;32',
                'cyan' => '0;36',
                'light_cyan' => '1;36',
                'red' => '0;31',
                'light_red' => '1;31',
                'purple' => '0;35',
                'light_purple' => '1;35',
                'brown' => '0;33',
                'yellow' => '1;33',
                'light_gray' => '0;37',
                'white' => '1;37',
            ),
            'bg' => array(
                'black' => '40',
                'red' => '41',
                'green' => '42',
                'yellow' => '43',
                'blue' => '44',
                'magenta' => '45',
                'cyan' => '46',
                'light_gray' => '47',
            )
        );

        $colored = '';

        if ($fgColor && isset($colors['fg'][$fgColor]))
        {
            $colored .= "\033[" . $colors['fg'][$fgColor] . "m";
        }

        if ($bgColor && isset($colors['bg'][$bgColor]))
        {
            $colored .= "\033[" . $colors['bg'][$bgColor] . "m";
        }

        $colored .=  $str . "\033[0m";
        return $colored;
    }

    public function removeColor($str)
    {
        return preg_replace('/\033\[[0-9;]+m/', '', $str);
    }

}

new LessWatcher();
